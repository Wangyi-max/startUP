(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{176:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"什么是startup"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是startup","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是startUP")]),t._v(" "),s("p",[t._v("和requireJS相似的，startUP也是用JavaScript编写的js框架，主要功能是可以按不同的先后依赖关系对 JavaScript 等文件的进行加载工作，可简单理解为js文件的加载器，它非常适合在浏览器中使用，它可以确保所依赖的js文件加载完成之后再加载当前的js文件，这在大量使用js文件的项目中可确保各个js文件的先后加载顺序，确保避免了以前因某些原因某个文件加载慢而导致其它加载快的文件需要依赖其某些功能而出现某函数或某变量找不到的问题。")]),t._v(" "),s("h1",{attrs:{id:"_1-简述javascript模块化编程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-简述javascript模块化编程","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. 简述JavaScript模块化编程")]),t._v(" "),s("p",[t._v("在早期编写JavaScript时，我们只需在 script 标签内写入JavaScript的代码就可以满足我们对页面交互的需要了。但随着时间的推移，时代的发展，原本的那种简单粗暴的编写方式所带来的诸如逻辑混乱，文件依赖管理问题，全局变量暴露，开发效率低，等问题接踵而至，社区为了解决这些问题提出了很种的解决方案，其中javaScript模块化编程是目前最有效的一种方式。")]),t._v(" "),s("h2",{attrs:{id:"先驱者commonjs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#先驱者commonjs","aria-hidden":"true"}},[t._v("#")]),t._v(" 先驱者Commonjs")]),t._v(" "),s("p",[t._v("2009年Node.js横空出世，主要用于服务器编程。而对于服务器端来说，必须要拥有模块化开发的方式。因此Commonjs社区制定了一个与社区同名的关于模块化的规范——Commonjs。")]),t._v(" "),s("p",[s("strong",[t._v("Commonjs规范分为三部分:")])]),t._v(" "),s("ul",[s("li",[t._v("module(模块标识)   require(模块引用)   exports(模块定义）")])]),t._v(" "),s("ol",[s("li",[t._v("module变量在每个模块内部，就代表当前模块；")]),t._v(" "),s("li",[t._v("exports属性是对外的接口，用于导出当前模块的方法或变量；")]),t._v(" "),s("li",[t._v("require()用来加载外部模块，读取并执行js文件，返回该模块的exports对象；")])]),t._v(" "),s("p",[t._v("根据CommonJS规范的规定，每个文件就是一个模块，有自己的作用域，也就是在一个文件里面定义的变量、函数、类，都是私有的，对其他文件是不可见的。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a.js")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"max"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("getName")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("上面代码中，变量name和函数getName，是当前文件a.js私有的，其他文件不可见。如要在其他的文件中访问变量name，最好的方式是输出模块对象module.exports:")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a.js")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"max"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("getName")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nmodule"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getName "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" getName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("上面代码通过module.exports对象扩展了一个方法，该方法就是模块外部与内部通信的桥梁。加载模块需要使用require方法，该方法读取一个文件并执行，最后返回当前加载文件内部的module.exports对象。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" object "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./a.js'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//max")]),t._v("\n")])])]),s("p",[t._v("CommonJS规范加载模块是同步的，也就是说，加载完成才执行后面的操作，Node.js主要用于服务器编程，模块都是存在本地硬盘，由于这个特性决定了CommonJS只能在服务器端大规模使用。\n而在浏览器端由于文件都放在服务器上，如果网速不够快的话，前面的文件如果没有加载完成，浏览器就会失去响应！由此不适合同步方式加载，但模块化开发管理方式势在必行，根据这个需求，针对浏览器的模块化规范就产生了 ——"),s("strong",[t._v("AMD")]),t._v("就产生了！")]),t._v(" "),s("h2",{attrs:{id:"amd-异步模块定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#amd-异步模块定义","aria-hidden":"true"}},[t._v("#")]),t._v(" AMD 异步模块定义")]),t._v(" "),s("p",[t._v("AMD的全名叫做：Asynchronous Module Definition即异步模块定义。它采用了异步的方式来加载模块，然后在回调函数中执行主逻辑，因此模块的加载不影响它后面的模块的运行。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("define")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" deps "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" factory"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("strong",[t._v("规范如下：")])]),t._v(" "),s("ol",[s("li",[t._v("用全局函数define来定义模块;")]),t._v(" "),s("li",[t._v("id为模块标识;")]),t._v(" "),s("li",[t._v("deps为依赖的模块数组;")]),t._v(" "),s("li",[t._v("如果factory为函数，模块对外暴漏API的方法有三种：return任意类型的数据;")]),t._v(" "),s("li",[t._v("如果factory为对象，则该对象即为模块的返回值")])]),t._v(" "),s("p",[t._v("在加载模块方面，AMD和CommonJs都是使用require。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("module"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("参数[module]，是一个数组，里面的成员就是需要加载的模块；")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//启动程序")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("requirejs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("module"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" callback"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("requirejs等同于require, 参数callback，是加载成功之后的回调函数。")]),t._v(" "),s("p",[t._v("虽然require.js实现了异步的模块化，解决了命名冲突，文件依赖，增加文件的独立性降低了耦合度，但它仍然有一些不足的地方，在使用require.js的时候，我们必须要提前加载所有的依赖，然后才可以使用，而不是需要使用时再加载，使得初次加载其他模块的速度较慢，提高了开发成本。")]),t._v(" "),s("p",[t._v("而startUP则借鉴了require.js的设计思想，并且改变了他不足的地方。")])])}],!1,null,null,null);a.default=e.exports}}]);